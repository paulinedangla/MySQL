CREATE DATABASE instagram;
USE instagram;

CREATE TABLE users( 
  id INT AUTO_INCREMENT PRIMARY KEY, 
  username VARCHAR(255) UNIQUE, 
  created_at TIMESTAMP DEFAULT NOW());

CREATE TABLE photos(
  id INT AUTO_INCREMENT PRIMARY KEY,
  image_url VARCHAR(255) NOT NULL,
  user_id INT NOT NULL,
  created_at TIMESTAMP DEFAULT NOW(),
  FOREIGN KEY (user_id) REFERENCES users(id));

CREATE TABLE comments(
  id INT AUTO_INCREMENT PRIMARY KEY,
  comment_text VARCHAR(255) NOT NULL,
  user_id INT NOT NULL,
  photo_id INT NOT NULL,
  created_at TIMESTAMP DEFAULT NOW(),
  FOREIGN KEY (user_id) REFERENCES users(id),
  FOREIGN KEY (photo_id) REFERENCES photos(id));

CREATE TABLE likes (
  user_id INTEGER NOT NULL,
  photo_id INTEGER NOT NULL,
  created_at TIMESTAMP DEFAULT NOW(),
  FOREIGN KEY(user_id) REFERENCES users(id),
  FOREIGN KEY(photo_id) REFERENCES photos(id),
  PRIMARY KEY(user_id, photo_id));

CREATE TABLE follows (
  follower_id INTEGER NOT NULL,
  followee_id INTEGER NOT NULL,
  created_at TIMESTAMP DEFAULT NOW(),
  FOREIGN KEY(follower_id) REFERENCES users(id),
  FOREIGN KEY(followee_id) REFERENCES users(id),
  PRIMARY KEY(follower_id, followee_id));

CREATE TABLE tags (
  id INTEGER AUTO_INCREMENT PRIMARY KEY,
  tag_name VARCHAR(255) UNIQUE,
  created_at TIMESTAMP DEFAULT NOW());
  
CREATE TABLE photo_tags (
  photo_id INTEGER NOT NULL,
  tag_id INTEGER NOT NULL,
  FOREIGN KEY(photo_id) REFERENCES photos(id),
  FOREIGN KEY(tag_id) REFERENCES tags(id),
  PRIMARY KEY(photo_id, tag_id));

-- Adding datas from a dedicated file -- 

source Instagram/ig_clone_data.sql

-- Challenge 1 : Finding 5 oldest users --

SELECT * FROM users 
ORDER BY created_at 
LIMIT 5;

-- Challenge 2 : Most popular registration date --

SELECT 
  DATE_FORMAT(created_at,'%W') AS day, 
  COUNT(username) AS registers 
FROM users 
GROUP BY day 
ORDER BY registers DESC
LIMIT 1;

-- Challenge 3 : identify inactive users (users with no photos) --

SELECT users.username 
FROM users 
LEFT JOIN photos 
  ON users.id = photos.user_id 
WHERE image_url IS NULL 
ORDER BY username;

-- Challenge 4 : identify most popular photo (and user who created it) --

SELECT 
  username, 
  image_url, 
  COUNT(photo_id) AS likes 
FROM users 
JOIN photos 
  ON users.id=photos.user_id 
JOIN likes 
  ON photos.id = likes.photo_id 
GROUP BY image_url 
ORDER BY likes DESC
LIMIT 1;

-- Challenge 5 : calculate average number of photos per user -- 

SELECT 
  (SELECT COUNT(image_url) 
    FROM photos)
    /(SELECT COUNT(username) 
      FROM users) AS average;

-- Challenge 6 : Five most popular tags --

SELECT 
  tag_name, 
  COUNT(tag_id) AS tag_popular 
FROM tags 
JOIN photo_tags 
  ON tags.id = photo_tags.tag_id 
GROUP BY tag_name 
ORDER BY tag_popular DESC 
LIMIT 5;

-- Challenge 7 :
